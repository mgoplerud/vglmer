% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/superlearner_functions.R
\name{sl_vglmer}
\alias{sl_vglmer}
\alias{SL.vglmer}
\alias{predict.SL.vglmer}
\alias{SL.glmer}
\alias{predict.SL.glmer}
\alias{add_formula_SL}
\title{SuperLearner with (Variational) Hierarchical Models}
\usage{
SL.vglmer(
  Y,
  X,
  newX,
  formula,
  family,
  id,
  obsWeights,
  control = vglmer_control()
)

\method{predict}{SL.vglmer}(object, newdata, allow_missing_levels = TRUE, ...)

SL.glmer(Y, X, newX, formula, family, id, obsWeights, control = NULL)

\method{predict}{SL.glmer}(object, newdata, allow.new.levels = TRUE, ...)

add_formula_SL(learner, env = parent.frame())
}
\arguments{
\item{Y}{From SuperLearner: The outcome in the training data set.}

\item{X}{From SuperLearner: The predictor variables in the training data.}

\item{newX}{From SuperLearner: The prediction variables in validation data.}

\item{formula}{The formula used for estimation, e.g. for \code{vglmer} or
\code{[g]lmer}.}

\item{family}{Family as character: Only "gaussian" and "binomial" accepted.}

\item{id}{From SuperLearner: Passed from SuperLearner.}

\item{obsWeights}{From SuperLearner: Weights for each observation. Not
permitted for \code{SL.vglmer}.}

\item{control}{Adjust the additional options for \code{vglmer} and
\code{[g]lmer}. See the corresponding estimation functions for details.}

\item{object}{Used in \code{predict} for \code{SL.glmer} and
\code{SL.vglmer}. A model estimated using either \code{SL.vglmer} or
\code{SL.glmer}.}

\item{newdata}{Model for predicting on test data}

\item{allow_missing_levels}{Allowing missing levels not in training data.}

\item{...}{Not used; added for compatibility with existing methods.}

\item{allow.new.levels}{From \code{lme4}, allow levels in prediction that are
not in the training data. Default (\code{TRUE}) for \code{SuperLearner}.}

\item{learner}{Character vector of model from SuperLearner. See "Details"
for how this is used.}

\item{env}{Environment to look for model. See "Details" for how this is used.}
}
\description{
Functions to integrate \code{vglmer} (or \code{glmer}) into
\code{SuperLearner}. Most of the arguments are standard for
\code{SuperLearner} functions. See "Details" for how \code{formula} should be
used.
}
\details{
This documentation describes two types of function. They are
  described below.
  
  \bold{Formula with SuperLearner}: The \code{vglmer} package provides a way
  to estimate models that require or use formula with \code{SuperLearner}.
  This allows for a design to be passed that contains variables that are
  \emph{not} used in estimation. This can be used as follows (see
  "Examples"). One calls the function \code{add_formula_SL} around the quoted
  name of a \code{SuperLearner} model, e.g. \code{add_formula_SL(learner =
  "SL.knn")}. This creates a new model and predict function with the suffix
  \code{"_f"}. This \bold{requires} a formula to be provided.
  
  With this in hand, \code{"SL.knn_f"} can be passed to SuperLearner with the
  accompanying formula argument and thus one can compare models with
  different formula or design on the same ensemble.
  
  \bold{Estimating Hierarchical Models in SuperLearner}: Two methods for
  estimating hierarchical models are provided. One allows for the use of
  variational hierarchical models using \code{SL.vglmer}. Non-variational
  hierarchical models estimated via \code{lme4} can be used in an ensemble
  with \code{SL.glmer}. The accompanying predict methods are also provided.
}
\examples{

if (requireNamespace('SuperLearner', quietly = TRUE)){
require(SuperLearner)
sim_data <- data.frame(
  x = rnorm(100),
  g = sample(letters, 100, replace = TRUE)
)
sim_data$y <- rbinom(nrow(sim_data), 
  1, plogis(runif(26)[match(sim_data$g, letters)]))
sim_data$g <- factor(sim_data$g)
sl_vglmer <- function(...){SL.vglmer(..., formula = y ~ x + (1 | g))}
SL.glm <- SuperLearner::SL.glm
add_formula_SL('SL.glm')
sl_glm_form <- function(...){SL.glm_f(..., formula = ~ x)}
\donttest{
   SuperLearner::SuperLearner(
     Y = sim_data$y, family = 'binomial',
     X = sim_data[, c('x', 'g')],
     cvControl = list(V = 2),
     SL.library = c('sl_vglmer', 'sl_glm_form')
   )
}
}
}
