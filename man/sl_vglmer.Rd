% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/superlearner_functions.R
\name{sl_vglmer}
\alias{sl_vglmer}
\alias{SL.vglmer}
\alias{predict.SL.vglmer}
\alias{SL.glmer}
\alias{predict.SL.glmer}
\alias{add_formula_SL}
\title{SuperLearner with (Variational) Hierarchical Models}
\usage{
SL.vglmer(
  Y,
  X,
  newX,
  formula,
  family,
  id,
  obsWeights,
  control = vglmer_control()
)

\method{predict}{SL.vglmer}(object, newdata, allow_missing_levels = TRUE, ...)

SL.glmer(Y, X, newX, formula, family, id, obsWeights, control = glmerControl())

\method{predict}{SL.glmer}(object, newdata, allow.new.levels = TRUE, ...)

add_formula_SL(learner, env = parent.frame())
}
\arguments{
\item{Y}{The outcome in the training data set.}

\item{X}{The predictor variables in the training data.}

\item{newX}{The prediction variables in validation data.}

\item{formula}{The formula used to fit the model using standard "lme4"
syntax.}

\item{family}{Family; only linear or binomial permitted.}

\item{id}{Passed from SuperLeanrer. Not used.}

\item{obsWeights}{Weights for each observation.}

\item{control}{Control fitting; vglmer_control for SL.vglmer and
glmer_control for SL.glmer}

\item{object}{Model estimated using SL.vglmer or SL.glmer}

\item{newdata}{Model for predicting on test data}

\item{allow_missing_levels}{Allowing missing levels not in training data.}

\item{...}{Not used}

\item{allow.new.levels}{Allowing missing levels not in training data.}

\item{learner}{Character vector of method from SuperLearner}

\item{env}{Environment to look for method}
}
\description{
Functions to integrate vglmer (or glmer) into SuperLearner. Additional
function to add an argument for "formula" to any existing SuperLearner
method. This is useful when the design should not include all covariates.
}
\examples{

if (requireNamespace('SuperLearner', quietly = TRUE)){
require(SuperLearner)
sim_data <- data.frame(
  x = rnorm(100),
  g = sample(letters, 100, replace = TRUE)
)
sim_data$y <- rbinom(nrow(sim_data), 1, plogis(runif(26)[match(sim_data$g, letters)]))
sim_data$g <- factor(sim_data$g)
sl_vglmer <- function(...){SL.vglmer(..., formula = y ~ x + (1 | g))}
SL.glm <- SuperLearner::SL.glm
add_formula_SL('SL.glm')
sl_glm <- function(...){SL.glm_f(..., formula = ~ x)}
SuperLearner::SuperLearner(
  Y = sim_data$y, family = 'binomial',
  X = sim_data[, c('x', 'g')],
  cvControl = list(V = 2),
  SL.library = c('sl_vglmer', 'sl_glm')
)
}
}
