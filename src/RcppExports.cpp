// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// LinRegChol
List LinRegChol(const Eigen::MappedSparseMatrix<double> X, const Eigen::MappedSparseMatrix<double> omega, const Eigen::MappedSparseMatrix<double> prior_precision, const Eigen::Map<Eigen::VectorXd> y);
RcppExport SEXP _vglmer_LinRegChol(SEXP XSEXP, SEXP omegaSEXP, SEXP prior_precisionSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type prior_precision(prior_precisionSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(LinRegChol(X, omega, prior_precision, y));
    return rcpp_result_gen;
END_RCPP
}
// chol_calculate_outer_alpha
List chol_calculate_outer_alpha(const Eigen::MappedSparseMatrix<double> cholL, const Rcpp::NumericVector P, const Eigen::Map<Eigen::VectorXd> alpha_mu, const Rcpp::List& re_mu_list, const Rcpp::List& re_group_list, const Rcpp::List& re_position_list);
RcppExport SEXP _vglmer_chol_calculate_outer_alpha(SEXP cholLSEXP, SEXP PSEXP, SEXP alpha_muSEXP, SEXP re_mu_listSEXP, SEXP re_group_listSEXP, SEXP re_position_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type cholL(cholLSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type re_mu_list(re_mu_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type re_group_list(re_group_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type re_position_list(re_position_listSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_calculate_outer_alpha(cholL, P, alpha_mu, re_mu_list, re_group_list, re_position_list));
    return rcpp_result_gen;
END_RCPP
}
// GibbsLinRegChol
List GibbsLinRegChol(const Eigen::MappedSparseMatrix<double> X, const Eigen::MappedSparseMatrix<double> omega, const Eigen::MappedSparseMatrix<double> precision, const Eigen::Map<Eigen::VectorXd> y, const Eigen::Map<Eigen::VectorXd> stdnorm);
RcppExport SEXP _vglmer_GibbsLinRegChol(SEXP XSEXP, SEXP omegaSEXP, SEXP precisionSEXP, SEXP ySEXP, SEXP stdnormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type stdnorm(stdnormSEXP);
    rcpp_result_gen = Rcpp::wrap(GibbsLinRegChol(X, omega, precision, y, stdnorm));
    return rcpp_result_gen;
END_RCPP
}
// cyclical_descent_LinReg
List cyclical_descent_LinReg(const Eigen::MappedSparseMatrix<double> X, const Eigen::Map<Eigen::VectorXd> y, const Eigen::Map<Eigen::VectorXd> old_eb, const Rcpp::List& cyclical_list, const Rcpp::List& precision_list, const double sigmasq);
RcppExport SEXP _vglmer_cyclical_descent_LinReg(SEXP XSEXP, SEXP ySEXP, SEXP old_ebSEXP, SEXP cyclical_listSEXP, SEXP precision_listSEXP, SEXP sigmasqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type old_eb(old_ebSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type cyclical_list(cyclical_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type precision_list(precision_listSEXP);
    Rcpp::traits::input_parameter< const double >::type sigmasq(sigmasqSEXP);
    rcpp_result_gen = Rcpp::wrap(cyclical_descent_LinReg(X, y, old_eb, cyclical_list, precision_list, sigmasq));
    return rcpp_result_gen;
END_RCPP
}
// calculate_expected_outer_alpha
List calculate_expected_outer_alpha(const Eigen::MappedSparseMatrix<double> L, const Eigen::Map<Eigen::VectorXd> alpha_mu, const Rcpp::List& re_position_list);
RcppExport SEXP _vglmer_calculate_expected_outer_alpha(SEXP LSEXP, SEXP alpha_muSEXP, SEXP re_position_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type L(LSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type re_position_list(re_position_listSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_expected_outer_alpha(L, alpha_mu, re_position_list));
    return rcpp_result_gen;
END_RCPP
}
// vecR_ridge_general
Eigen::MatrixXd vecR_ridge_general(const Eigen::MappedSparseMatrix<double> L, const Rcpp::NumericVector pg_mean, const Eigen::Map<Eigen::MatrixXd> Z, const Eigen::Map<Eigen::MatrixXi> M, const Rcpp::NumericVector mapping_J, const Rcpp::NumericVector d, const Eigen::VectorXi start_z);
RcppExport SEXP _vglmer_vecR_ridge_general(SEXP LSEXP, SEXP pg_meanSEXP, SEXP ZSEXP, SEXP MSEXP, SEXP mapping_JSEXP, SEXP dSEXP, SEXP start_zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type L(LSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type pg_mean(pg_meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type mapping_J(mapping_JSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type start_z(start_zSEXP);
    rcpp_result_gen = Rcpp::wrap(vecR_ridge_general(L, pg_mean, Z, M, mapping_J, d, start_z));
    return rcpp_result_gen;
END_RCPP
}
// vecR_design
Eigen::MatrixXd vecR_design(const Eigen::Map<Eigen::VectorXd> alpha_mu, const Eigen::Map<Eigen::MatrixXd> Z, const Eigen::Map<Eigen::MatrixXi> M, const Rcpp::NumericVector mapping_J, const Rcpp::NumericVector d, const Eigen::VectorXi start_z);
RcppExport SEXP _vglmer_vecR_design(SEXP alpha_muSEXP, SEXP ZSEXP, SEXP MSEXP, SEXP mapping_JSEXP, SEXP dSEXP, SEXP start_zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi> >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type mapping_J(mapping_JSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type start_z(start_zSEXP);
    rcpp_result_gen = Rcpp::wrap(vecR_design(alpha_mu, Z, M, mapping_J, d, start_z));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_vglmer_LinRegChol", (DL_FUNC) &_vglmer_LinRegChol, 4},
    {"_vglmer_chol_calculate_outer_alpha", (DL_FUNC) &_vglmer_chol_calculate_outer_alpha, 6},
    {"_vglmer_GibbsLinRegChol", (DL_FUNC) &_vglmer_GibbsLinRegChol, 5},
    {"_vglmer_cyclical_descent_LinReg", (DL_FUNC) &_vglmer_cyclical_descent_LinReg, 6},
    {"_vglmer_calculate_expected_outer_alpha", (DL_FUNC) &_vglmer_calculate_expected_outer_alpha, 3},
    {"_vglmer_vecR_ridge_general", (DL_FUNC) &_vglmer_vecR_ridge_general, 7},
    {"_vglmer_vecR_design", (DL_FUNC) &_vglmer_vecR_design, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_vglmer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
